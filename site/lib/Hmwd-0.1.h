/* Hmwd-0.1.h generated by valac 0.16.1, the Vala compiler, do not modify */


#ifndef __LIB_HMWD_0_1_H__
#define __LIB_HMWD_0_1_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <float.h>
#include <math.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

G_BEGIN_DECLS


#define HMWD_TYPE_ANIMATION (hmwd_animation_get_type ())
#define HMWD_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_ANIMATION, HmwdAnimation))
#define HMWD_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_ANIMATION, HmwdAnimationClass))
#define HMWD_IS_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_ANIMATION))
#define HMWD_IS_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_ANIMATION))
#define HMWD_ANIMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_ANIMATION, HmwdAnimationClass))

typedef struct _HmwdAnimation HmwdAnimation;
typedef struct _HmwdAnimationClass HmwdAnimationClass;
typedef struct _HmwdAnimationPrivate HmwdAnimationPrivate;

#define HMWD_TYPE_DIRECTION (hmwd_direction_get_type ())

#define HMWD_TYPE_ANIMATION_DATA (hmwd_animation_data_get_type ())
#define HMWD_ANIMATION_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_ANIMATION_DATA, HmwdAnimationData))
#define HMWD_ANIMATION_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_ANIMATION_DATA, HmwdAnimationDataClass))
#define HMWD_IS_ANIMATION_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_ANIMATION_DATA))
#define HMWD_IS_ANIMATION_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_ANIMATION_DATA))
#define HMWD_ANIMATION_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_ANIMATION_DATA, HmwdAnimationDataClass))

typedef struct _HmwdAnimationData HmwdAnimationData;
typedef struct _HmwdAnimationDataClass HmwdAnimationDataClass;

#define HMWD_TYPE_DIALOG_TREE (hmwd_dialog_tree_get_type ())
#define HMWD_DIALOG_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_DIALOG_TREE, HmwdDialogTree))
#define HMWD_DIALOG_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_DIALOG_TREE, HmwdDialogTreeClass))
#define HMWD_IS_DIALOG_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_DIALOG_TREE))
#define HMWD_IS_DIALOG_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_DIALOG_TREE))
#define HMWD_DIALOG_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_DIALOG_TREE, HmwdDialogTreeClass))

typedef struct _HmwdDialogTree HmwdDialogTree;
typedef struct _HmwdDialogTreeClass HmwdDialogTreeClass;
typedef struct _HmwdDialogTreePrivate HmwdDialogTreePrivate;

#define HMWD_TYPE_ENTITY (hmwd_entity_get_type ())
#define HMWD_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_ENTITY, HmwdEntity))
#define HMWD_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_ENTITY, HmwdEntityClass))
#define HMWD_IS_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_ENTITY))
#define HMWD_IS_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_ENTITY))
#define HMWD_ENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_ENTITY, HmwdEntityClass))

typedef struct _HmwdEntity HmwdEntity;
typedef struct _HmwdEntityClass HmwdEntityClass;
typedef struct _HmwdEntityPrivate HmwdEntityPrivate;

#define HMWD_TYPE_VECTOR (hmwd_vector_get_type ())
#define HMWD_VECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_VECTOR, HmwdVector))
#define HMWD_VECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_VECTOR, HmwdVectorClass))
#define HMWD_IS_VECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_VECTOR))
#define HMWD_IS_VECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_VECTOR))
#define HMWD_VECTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_VECTOR, HmwdVectorClass))

typedef struct _HmwdVector HmwdVector;
typedef struct _HmwdVectorClass HmwdVectorClass;

#define HMWD_TYPE_COORD (hmwd_coord_get_type ())
#define HMWD_COORD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_COORD, HmwdCoord))
#define HMWD_COORD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_COORD, HmwdCoordClass))
#define HMWD_IS_COORD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_COORD))
#define HMWD_IS_COORD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_COORD))
#define HMWD_COORD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_COORD, HmwdCoordClass))

typedef struct _HmwdCoord HmwdCoord;
typedef struct _HmwdCoordClass HmwdCoordClass;

#define HMWD_TYPE_SPRITE_SET (hmwd_sprite_set_get_type ())
#define HMWD_SPRITE_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_SPRITE_SET, HmwdSpriteSet))
#define HMWD_SPRITE_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_SPRITE_SET, HmwdSpriteSetClass))
#define HMWD_IS_SPRITE_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_SPRITE_SET))
#define HMWD_IS_SPRITE_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_SPRITE_SET))
#define HMWD_SPRITE_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_SPRITE_SET, HmwdSpriteSetClass))

typedef struct _HmwdSpriteSet HmwdSpriteSet;
typedef struct _HmwdSpriteSetClass HmwdSpriteSetClass;

#define HMWD_TYPE_LAYER (hmwd_layer_get_type ())
#define HMWD_LAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_LAYER, HmwdLayer))
#define HMWD_LAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_LAYER, HmwdLayerClass))
#define HMWD_IS_LAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_LAYER))
#define HMWD_IS_LAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_LAYER))
#define HMWD_LAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_LAYER, HmwdLayerClass))

typedef struct _HmwdLayer HmwdLayer;
typedef struct _HmwdLayerClass HmwdLayerClass;
typedef struct _HmwdLayerPrivate HmwdLayerPrivate;

#define HMWD_TYPE_TILE (hmwd_tile_get_type ())
#define HMWD_TILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_TILE, HmwdTile))
#define HMWD_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_TILE, HmwdTileClass))
#define HMWD_IS_TILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_TILE))
#define HMWD_IS_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_TILE))
#define HMWD_TILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_TILE, HmwdTileClass))

typedef struct _HmwdTile HmwdTile;
typedef struct _HmwdTileClass HmwdTileClass;

#define HMWD_TYPE_LOGICAL_TILE (hmwd_logical_tile_get_type ())
#define HMWD_LOGICAL_TILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_LOGICAL_TILE, HmwdLogicalTile))
#define HMWD_LOGICAL_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_LOGICAL_TILE, HmwdLogicalTileClass))
#define HMWD_IS_LOGICAL_TILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_LOGICAL_TILE))
#define HMWD_IS_LOGICAL_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_LOGICAL_TILE))
#define HMWD_LOGICAL_TILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_LOGICAL_TILE, HmwdLogicalTileClass))

typedef struct _HmwdLogicalTile HmwdLogicalTile;
typedef struct _HmwdLogicalTileClass HmwdLogicalTileClass;
typedef struct _HmwdLogicalTilePrivate HmwdLogicalTilePrivate;

#define HMWD_TYPE_TILE_TYPE (hmwd_tile_type_get_type ())

#define HMWD_TYPE_PLANT (hmwd_plant_get_type ())
#define HMWD_PLANT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_PLANT, HmwdPlant))
#define HMWD_PLANT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_PLANT, HmwdPlantClass))
#define HMWD_IS_PLANT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_PLANT))
#define HMWD_IS_PLANT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_PLANT))
#define HMWD_PLANT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_PLANT, HmwdPlantClass))

typedef struct _HmwdPlant HmwdPlant;
typedef struct _HmwdPlantClass HmwdPlantClass;

#define HMWD_TYPE_DATA (hmwd_data_get_type ())
#define HMWD_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_DATA, HmwdData))
#define HMWD_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_DATA, HmwdDataClass))
#define HMWD_IS_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_DATA))
#define HMWD_IS_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_DATA))
#define HMWD_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_DATA, HmwdDataClass))

typedef struct _HmwdData HmwdData;
typedef struct _HmwdDataClass HmwdDataClass;
typedef struct _HmwdDataPrivate HmwdDataPrivate;

#define HMWD_TYPE_TILE_SET_MANAGER (hmwd_tile_set_manager_get_type ())
#define HMWD_TILE_SET_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_TILE_SET_MANAGER, HmwdTileSetManager))
#define HMWD_TILE_SET_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_TILE_SET_MANAGER, HmwdTileSetManagerClass))
#define HMWD_IS_TILE_SET_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_TILE_SET_MANAGER))
#define HMWD_IS_TILE_SET_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_TILE_SET_MANAGER))
#define HMWD_TILE_SET_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_TILE_SET_MANAGER, HmwdTileSetManagerClass))

typedef struct _HmwdTileSetManager HmwdTileSetManager;
typedef struct _HmwdTileSetManagerClass HmwdTileSetManagerClass;

#define HMWD_TYPE_MAP_MANAGER (hmwd_map_manager_get_type ())
#define HMWD_MAP_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_MAP_MANAGER, HmwdMapManager))
#define HMWD_MAP_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_MAP_MANAGER, HmwdMapManagerClass))
#define HMWD_IS_MAP_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_MAP_MANAGER))
#define HMWD_IS_MAP_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_MAP_MANAGER))
#define HMWD_MAP_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_MAP_MANAGER, HmwdMapManagerClass))

typedef struct _HmwdMapManager HmwdMapManager;
typedef struct _HmwdMapManagerClass HmwdMapManagerClass;

#define HMWD_TYPE_SPRITE_SET_MANAGER (hmwd_sprite_set_manager_get_type ())
#define HMWD_SPRITE_SET_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_SPRITE_SET_MANAGER, HmwdSpriteSetManager))
#define HMWD_SPRITE_SET_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_SPRITE_SET_MANAGER, HmwdSpriteSetManagerClass))
#define HMWD_IS_SPRITE_SET_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_SPRITE_SET_MANAGER))
#define HMWD_IS_SPRITE_SET_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_SPRITE_SET_MANAGER))
#define HMWD_SPRITE_SET_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_SPRITE_SET_MANAGER, HmwdSpriteSetManagerClass))

typedef struct _HmwdSpriteSetManager HmwdSpriteSetManager;
typedef struct _HmwdSpriteSetManagerClass HmwdSpriteSetManagerClass;
typedef struct _HmwdMapManagerPrivate HmwdMapManagerPrivate;

#define HMWD_TYPE_MAP (hmwd_map_get_type ())
#define HMWD_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_MAP, HmwdMap))
#define HMWD_MAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_MAP, HmwdMapClass))
#define HMWD_IS_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_MAP))
#define HMWD_IS_MAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_MAP))
#define HMWD_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_MAP, HmwdMapClass))

typedef struct _HmwdMap HmwdMap;
typedef struct _HmwdMapClass HmwdMapClass;
typedef struct _HmwdMapPrivate HmwdMapPrivate;

#define HMWD_TYPE_TILE_SET_REFERENCE (hmwd_tile_set_reference_get_type ())
#define HMWD_TILE_SET_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_TILE_SET_REFERENCE, HmwdTileSetReference))
#define HMWD_TILE_SET_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_TILE_SET_REFERENCE, HmwdTileSetReferenceClass))
#define HMWD_IS_TILE_SET_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_TILE_SET_REFERENCE))
#define HMWD_IS_TILE_SET_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_TILE_SET_REFERENCE))
#define HMWD_TILE_SET_REFERENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_TILE_SET_REFERENCE, HmwdTileSetReferenceClass))

typedef struct _HmwdTileSetReference HmwdTileSetReference;
typedef struct _HmwdTileSetReferenceClass HmwdTileSetReferenceClass;

#define HMWD_TYPE_MATRIX (hmwd_matrix_get_type ())
#define HMWD_MATRIX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_MATRIX, HmwdMatrix))
#define HMWD_MATRIX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_MATRIX, HmwdMatrixClass))
#define HMWD_IS_MATRIX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_MATRIX))
#define HMWD_IS_MATRIX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_MATRIX))
#define HMWD_MATRIX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_MATRIX, HmwdMatrixClass))

typedef struct _HmwdMatrix HmwdMatrix;
typedef struct _HmwdMatrixClass HmwdMatrixClass;
typedef struct _HmwdMatrixPrivate HmwdMatrixPrivate;
typedef struct _HmwdPlantPrivate HmwdPlantPrivate;

#define HMWD_TYPE_CROP_TYPE (hmwd_crop_type_get_type ())
typedef struct _HmwdTilePrivate HmwdTilePrivate;

#define HMWD_TYPE_REGULAR_TILE (hmwd_regular_tile_get_type ())
#define HMWD_REGULAR_TILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_REGULAR_TILE, HmwdRegularTile))
#define HMWD_REGULAR_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_REGULAR_TILE, HmwdRegularTileClass))
#define HMWD_IS_REGULAR_TILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_REGULAR_TILE))
#define HMWD_IS_REGULAR_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_REGULAR_TILE))
#define HMWD_REGULAR_TILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_REGULAR_TILE, HmwdRegularTileClass))

typedef struct _HmwdRegularTile HmwdRegularTile;
typedef struct _HmwdRegularTileClass HmwdRegularTileClass;
typedef struct _HmwdRegularTilePrivate HmwdRegularTilePrivate;

#define HMWD_TYPE_SPLIT_TILE (hmwd_split_tile_get_type ())
#define HMWD_SPLIT_TILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_SPLIT_TILE, HmwdSplitTile))
#define HMWD_SPLIT_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_SPLIT_TILE, HmwdSplitTileClass))
#define HMWD_IS_SPLIT_TILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_SPLIT_TILE))
#define HMWD_IS_SPLIT_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_SPLIT_TILE))
#define HMWD_SPLIT_TILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_SPLIT_TILE, HmwdSplitTileClass))

typedef struct _HmwdSplitTile HmwdSplitTile;
typedef struct _HmwdSplitTileClass HmwdSplitTileClass;
typedef struct _HmwdSplitTilePrivate HmwdSplitTilePrivate;

#define HMWD_TYPE_SUB_TILE (hmwd_sub_tile_get_type ())
#define HMWD_SUB_TILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_SUB_TILE, HmwdSubTile))
#define HMWD_SUB_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_SUB_TILE, HmwdSubTileClass))
#define HMWD_IS_SUB_TILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_SUB_TILE))
#define HMWD_IS_SUB_TILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_SUB_TILE))
#define HMWD_SUB_TILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_SUB_TILE, HmwdSubTileClass))

typedef struct _HmwdSubTile HmwdSubTile;
typedef struct _HmwdSubTileClass HmwdSubTileClass;

#define HMWD_TYPE_SPRITE_LAYER (hmwd_sprite_layer_get_type ())
#define HMWD_SPRITE_LAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_SPRITE_LAYER, HmwdSpriteLayer))
#define HMWD_SPRITE_LAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_SPRITE_LAYER, HmwdSpriteLayerClass))
#define HMWD_IS_SPRITE_LAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_SPRITE_LAYER))
#define HMWD_IS_SPRITE_LAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_SPRITE_LAYER))
#define HMWD_SPRITE_LAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_SPRITE_LAYER, HmwdSpriteLayerClass))

typedef struct _HmwdSpriteLayer HmwdSpriteLayer;
typedef struct _HmwdSpriteLayerClass HmwdSpriteLayerClass;
typedef struct _HmwdSpriteLayerPrivate HmwdSpriteLayerPrivate;

#define HMWD_TYPE_SPRITE (hmwd_sprite_get_type ())
#define HMWD_SPRITE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_SPRITE, HmwdSprite))
#define HMWD_SPRITE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_SPRITE, HmwdSpriteClass))
#define HMWD_IS_SPRITE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_SPRITE))
#define HMWD_IS_SPRITE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_SPRITE))
#define HMWD_SPRITE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_SPRITE, HmwdSpriteClass))

typedef struct _HmwdSprite HmwdSprite;
typedef struct _HmwdSpriteClass HmwdSpriteClass;

#define HMWD_TYPE_SPRITE_LAYER_TYPE (hmwd_sprite_layer_type_get_type ())
typedef struct _HmwdSpriteSetManagerPrivate HmwdSpriteSetManagerPrivate;
typedef struct _HmwdSpriteSetPrivate HmwdSpriteSetPrivate;
typedef struct _HmwdSpritePrivate HmwdSpritePrivate;

#define HMWD_TYPE_GDK_TEXTURE (hmwd_gdk_texture_get_type ())
#define HMWD_GDK_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_GDK_TEXTURE, HmwdGdkTexture))
#define HMWD_GDK_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_GDK_TEXTURE, HmwdGdkTextureClass))
#define HMWD_IS_GDK_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_GDK_TEXTURE))
#define HMWD_IS_GDK_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_GDK_TEXTURE))
#define HMWD_GDK_TEXTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_GDK_TEXTURE, HmwdGdkTextureClass))

typedef struct _HmwdGdkTexture HmwdGdkTexture;
typedef struct _HmwdGdkTextureClass HmwdGdkTextureClass;
typedef struct _HmwdSubTilePrivate HmwdSubTilePrivate;

#define HMWD_TYPE_EDGE_SHAPE (hmwd_edge_shape_get_type ())
typedef struct _HmwdTileSetManagerPrivate HmwdTileSetManagerPrivate;

#define HMWD_TYPE_TILE_SET (hmwd_tile_set_get_type ())
#define HMWD_TILE_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), HMWD_TYPE_TILE_SET, HmwdTileSet))
#define HMWD_TILE_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), HMWD_TYPE_TILE_SET, HmwdTileSetClass))
#define HMWD_IS_TILE_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), HMWD_TYPE_TILE_SET))
#define HMWD_IS_TILE_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), HMWD_TYPE_TILE_SET))
#define HMWD_TILE_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), HMWD_TYPE_TILE_SET, HmwdTileSetClass))

typedef struct _HmwdTileSet HmwdTileSet;
typedef struct _HmwdTileSetClass HmwdTileSetClass;
typedef struct _HmwdTileSetReferencePrivate HmwdTileSetReferencePrivate;
typedef struct _HmwdTileSetPrivate HmwdTileSetPrivate;
typedef struct _HmwdVectorPrivate HmwdVectorPrivate;
typedef struct _HmwdCoordPrivate HmwdCoordPrivate;
typedef struct _HmwdAnimationDataPrivate HmwdAnimationDataPrivate;

#define HMWD_TYPE_MIRROR (hmwd_mirror_get_type ())

#define HMWD_TYPE_COLORSPACE (hmwd_colorspace_get_type ())

#define HMWD_TYPE_DRAW_LEVEL (hmwd_draw_level_get_type ())

#define HMWD_TYPE_VIEW_ENGINE (hmwd_view_engine_get_type ())

#define HMWD_TYPE_SEASON (hmwd_season_get_type ())
typedef struct _HmwdGdkTexturePrivate HmwdGdkTexturePrivate;

struct _HmwdAnimation {
	GObject parent_instance;
	HmwdAnimationPrivate * priv;
};

struct _HmwdAnimationClass {
	GObjectClass parent_class;
};

typedef enum  {
	HMWD_DIRECTION_NORTH = 0,
	HMWD_DIRECTION_EAST = 1,
	HMWD_DIRECTION_SOUTH = 2,
	HMWD_DIRECTION_WEST = 3
} HmwdDirection;

struct _HmwdDialogTree {
	GObject parent_instance;
	HmwdDialogTreePrivate * priv;
};

struct _HmwdDialogTreeClass {
	GObjectClass parent_class;
};

struct _HmwdEntity {
	GObject parent_instance;
	HmwdEntityPrivate * priv;
};

struct _HmwdEntityClass {
	GObjectClass parent_class;
	void (*age) (HmwdEntity* self);
};

struct _HmwdLayer {
	GObject parent_instance;
	HmwdLayerPrivate * priv;
};

struct _HmwdLayerClass {
	GObjectClass parent_class;
};

struct _HmwdLogicalTile {
	GObject parent_instance;
	HmwdLogicalTilePrivate * priv;
};

struct _HmwdLogicalTileClass {
	GObjectClass parent_class;
};

typedef enum  {
	HMWD_TILE_TYPE_NO_TILE,
	HMWD_TILE_TYPE_EMPTY_TILE,
	HMWD_TILE_TYPE_PLANTABLE,
	HMWD_TILE_TYPE_PLANT,
	HMWD_TILE_TYPE_GRASS,
	HMWD_TILE_TYPE_PATH,
	HMWD_TILE_TYPE_BUILDING,
	HMWD_TILE_TYPE_ROCK,
	HMWD_TILE_TYPE_WOOD,
	HMWD_TILE_TYPE_WATER
} HmwdTileType;

struct _HmwdData {
	GObject parent_instance;
	HmwdDataPrivate * priv;
};

struct _HmwdDataClass {
	GObjectClass parent_class;
};

struct _HmwdMapManager {
	GObject parent_instance;
	HmwdMapManagerPrivate * priv;
};

struct _HmwdMapManagerClass {
	GObjectClass parent_class;
};

struct _HmwdMap {
	GObject parent_instance;
	HmwdMapPrivate * priv;
};

struct _HmwdMapClass {
	GObjectClass parent_class;
};

struct _HmwdMatrix {
	GObject parent_instance;
	HmwdMatrixPrivate * priv;
	gdouble* mat;
	gint mat_length1;
	gint mat_length2;
	gboolean sq;
};

struct _HmwdMatrixClass {
	GObjectClass parent_class;
};

struct _HmwdPlant {
	GObject parent_instance;
	HmwdPlantPrivate * priv;
	gboolean alive;
	gboolean watered;
	guint daysUntilHarvest;
	guint cropsLeft;
	HmwdSpriteSet* spriteset;
};

struct _HmwdPlantClass {
	GObjectClass parent_class;
};

typedef enum  {
	HMWD_CROP_TYPE_EMPTY_CROP,
	HMWD_CROP_TYPE_GRASS,
	HMWD_CROP_TYPE_POTATO
} HmwdCropType;

struct _HmwdTile {
	GObject parent_instance;
	HmwdTilePrivate * priv;
};

struct _HmwdTileClass {
	GObjectClass parent_class;
	void (*save) (HmwdTile* self, const gchar* filename);
	void (*printValues) (HmwdTile* self);
	void (*calcEdges) (HmwdTile* self, HmwdTileType* neighbours, int neighbours_length1);
};

struct _HmwdRegularTile {
	HmwdTile parent_instance;
	HmwdRegularTilePrivate * priv;
};

struct _HmwdRegularTileClass {
	HmwdTileClass parent_class;
};

struct _HmwdSplitTile {
	HmwdTile parent_instance;
	HmwdSplitTilePrivate * priv;
	HmwdSubTile** subTiles;
	gint subTiles_length1;
};

struct _HmwdSplitTileClass {
	HmwdTileClass parent_class;
};

struct _HmwdSpriteLayer {
	GObject parent_instance;
	HmwdSpriteLayerPrivate * priv;
	gchar* trans;
	HmwdSprite** sprites;
	gint sprites_length1;
	gint sprites_length2;
};

struct _HmwdSpriteLayerClass {
	GObjectClass parent_class;
};

typedef enum  {
	HMWD_SPRITE_LAYER_TYPE_BASE = 0,
	HMWD_SPRITE_LAYER_TYPE_ITEM = 1
} HmwdSpriteLayerType;

struct _HmwdSpriteSetManager {
	GObject parent_instance;
	HmwdSpriteSetManagerPrivate * priv;
};

struct _HmwdSpriteSetManagerClass {
	GObjectClass parent_class;
};

struct _HmwdSpriteSet {
	GObject parent_instance;
	HmwdSpriteSetPrivate * priv;
	gchar* name;
	guint spritewidth;
	guint spriteheight;
	guint width;
	guint height;
	gchar* version;
	GeeList* spritelayers;
	GeeList* animations;
	HmwdAnimation* current_animation;
};

struct _HmwdSpriteSetClass {
	GObjectClass parent_class;
};

struct _HmwdSprite {
	GObject parent_instance;
	HmwdSpritePrivate * priv;
};

struct _HmwdSpriteClass {
	GObjectClass parent_class;
};

struct _HmwdSubTile {
	GObject parent_instance;
	HmwdSubTilePrivate * priv;
};

struct _HmwdSubTileClass {
	GObjectClass parent_class;
};

typedef enum  {
	HMWD_EDGE_SHAPE_FULL,
	HMWD_EDGE_SHAPE_OUTER_CORNER,
	HMWD_EDGE_SHAPE_INNER_CORNER,
	HMWD_EDGE_SHAPE_V_LINE,
	HMWD_EDGE_SHAPE_H_LINE
} HmwdEdgeShape;

struct _HmwdTileSetManager {
	GObject parent_instance;
	HmwdTileSetManagerPrivate * priv;
};

struct _HmwdTileSetManagerClass {
	GObjectClass parent_class;
};

struct _HmwdTileSetReference {
	GObject parent_instance;
	HmwdTileSetReferencePrivate * priv;
};

struct _HmwdTileSetReferenceClass {
	GObjectClass parent_class;
};

struct _HmwdTileSet {
	GObject parent_instance;
	HmwdTileSetPrivate * priv;
	gchar* name;
	guint tilewidth;
	guint tileheight;
	gchar* trans;
	guint width;
	guint height;
	HmwdTile** tile;
	gint tile_length1;
	gint tile_length2;
};

struct _HmwdTileSetClass {
	GObjectClass parent_class;
};

struct _HmwdVector {
	GObject parent_instance;
	HmwdVectorPrivate * priv;
	gdouble* vec;
	gint vec_length1;
};

struct _HmwdVectorClass {
	GObjectClass parent_class;
};

struct _HmwdCoord {
	HmwdVector parent_instance;
	HmwdCoordPrivate * priv;
};

struct _HmwdCoordClass {
	HmwdVectorClass parent_class;
};

typedef enum  {
	HMWD_MIRROR_NONE,
	HMWD_MIRROR_VERTICAL,
	HMWD_MIRROR_HORIZONTAL
} HmwdMirror;

struct _HmwdAnimationData {
	GObject parent_instance;
	HmwdAnimationDataPrivate * priv;
	HmwdMirror mirror;
};

struct _HmwdAnimationDataClass {
	GObjectClass parent_class;
};

typedef enum  {
	HMWD_COLORSPACE_RGB,
	HMWD_COLORSPACE_RGBA
} HmwdColorspace;

typedef enum  {
	HMWD_DRAW_LEVEL_UNDER = 1,
	HMWD_DRAW_LEVEL_SAME = 0,
	HMWD_DRAW_LEVEL_OVER = -1
} HmwdDrawLevel;

typedef enum  {
	HMWD_VIEW_ENGINE_SDL,
	HMWD_VIEW_ENGINE_OPENGL,
	HMWD_VIEW_ENGINE_CLUTTER,
	HMWD_VIEW_ENGINE_GTK_CLUTTER
} HmwdViewEngine;

typedef enum  {
	HMWD_SEASON_SPRING = 0,
	HMWD_SEASON_SUMMER = 1,
	HMWD_SEASON_FALL = 2,
	HMWD_SEASON_WINTER = 3
} HmwdSeason;

struct _HmwdGdkTexture {
	GObject parent_instance;
	HmwdGdkTexturePrivate * priv;
};

struct _HmwdGdkTextureClass {
	GObjectClass parent_class;
};


GType hmwd_animation_get_type (void) G_GNUC_CONST;
GType hmwd_direction_get_type (void) G_GNUC_CONST;
GType hmwd_animation_data_get_type (void) G_GNUC_CONST;
HmwdAnimation* hmwd_animation_new (const gchar* name, gboolean repeat, HmwdDirection direction, GeeList* animationdata);
HmwdAnimation* hmwd_animation_construct (GType object_type, const gchar* name, gboolean repeat, HmwdDirection direction, GeeList* animationdata);
HmwdAnimationData* hmwd_animation_get_AnimationData (HmwdAnimation* self);
void hmwd_animation_printAnimationData (HmwdAnimation* self);
void hmwd_animation_printValues (HmwdAnimation* self);
void hmwd_animation_printAll (HmwdAnimation* self);
const gchar* hmwd_animation_get_name (HmwdAnimation* self);
void hmwd_animation_set_name (HmwdAnimation* self, const gchar* value);
HmwdDirection hmwd_animation_get_direction (HmwdAnimation* self);
void hmwd_animation_set_direction (HmwdAnimation* self, HmwdDirection value);
gboolean hmwd_animation_get_repeat (HmwdAnimation* self);
void hmwd_animation_set_repeat (HmwdAnimation* self, gboolean value);
gdouble hmwd_animation_get_frame_ps (HmwdAnimation* self);
void hmwd_animation_set_frame_ps (HmwdAnimation* self, gdouble value);
GeeList* hmwd_animation_get_animationdata (HmwdAnimation* self);
void hmwd_animation_set_animationdata (HmwdAnimation* self, GeeList* value);
gint hmwd_animation_get_current_frame_index (HmwdAnimation* self);
void hmwd_animation_set_current_frame_index (HmwdAnimation* self, gint value);
GType hmwd_dialog_tree_get_type (void) G_GNUC_CONST;
HmwdDialogTree* hmwd_dialog_tree_new (const gchar* q, const gchar* a, HmwdDialogTree** c, int c_length1);
HmwdDialogTree* hmwd_dialog_tree_construct (GType object_type, const gchar* q, const gchar* a, HmwdDialogTree** c, int c_length1);
void hmwd_dialog_tree_chooseAnswer (HmwdDialogTree* self, gboolean next);
gchar* hmwd_dialog_tree_getText (HmwdDialogTree* self);
HmwdDialogTree* hmwd_dialog_tree_getAnswer (HmwdDialogTree* self);
const gchar* hmwd_dialog_tree_get_answer (HmwdDialogTree* self);
void hmwd_dialog_tree_set_answer (HmwdDialogTree* self, const gchar* value);
const gchar* hmwd_dialog_tree_get_question (HmwdDialogTree* self);
void hmwd_dialog_tree_set_question (HmwdDialogTree* self, const gchar* value);
gint hmwd_dialog_tree_get_choice (HmwdDialogTree* self);
void hmwd_dialog_tree_set_choice (HmwdDialogTree* self, gint value);
HmwdDialogTree** hmwd_dialog_tree_get_children (HmwdDialogTree* self, int* result_length1);
GType hmwd_entity_get_type (void) G_GNUC_CONST;
HmwdEntity* hmwd_entity_construct (GType object_type);
gint hmwd_entity_compare (HmwdEntity* a, HmwdEntity* b);
void hmwd_entity_setMotion (HmwdEntity* self, HmwdDirection d, gboolean motion);
void hmwd_entity_age (HmwdEntity* self);
gdouble hmwd_entity_get_steps_ps (HmwdEntity* self);
void hmwd_entity_set_steps_ps (HmwdEntity* self, gdouble value);
GType hmwd_vector_get_type (void) G_GNUC_CONST;
GType hmwd_coord_get_type (void) G_GNUC_CONST;
HmwdCoord* hmwd_entity_get_pos (HmwdEntity* self);
void hmwd_entity_set_pos (HmwdEntity* self, HmwdCoord* value);
HmwdDirection hmwd_entity_get_direction (HmwdEntity* self);
void hmwd_entity_set_direction (HmwdEntity* self, HmwdDirection value);
gboolean hmwd_entity_get_motion (HmwdEntity* self);
void hmwd_entity_set_motion (HmwdEntity* self, gboolean value);
gdouble hmwd_entity_get_collisionRadius (HmwdEntity* self);
void hmwd_entity_set_collisionRadius (HmwdEntity* self, gdouble value);
GType hmwd_sprite_set_get_type (void) G_GNUC_CONST;
HmwdSpriteSet* hmwd_entity_get_spriteset (HmwdEntity* self);
void hmwd_entity_set_spriteset (HmwdEntity* self, HmwdSpriteSet* value);
GType hmwd_layer_get_type (void) G_GNUC_CONST;
HmwdLayer* hmwd_layer_new (void);
HmwdLayer* hmwd_layer_construct (GType object_type);
GType hmwd_tile_get_type (void) G_GNUC_CONST;
HmwdTile* hmwd_layer_getTileXY (HmwdLayer* self, guint x, guint y);
HmwdLayer* hmwd_layer_new_sized (gint width, gint height);
HmwdLayer* hmwd_layer_construct_sized (GType object_type, gint width, gint height);
HmwdLayer* hmwd_layer_new_all (const gchar* name, gdouble zoff, gboolean collision, gint width, gint height);
HmwdLayer* hmwd_layer_construct_all (GType object_type, const gchar* name, gdouble zoff, gboolean collision, gint width, gint height);
void hmwd_layer_calcEdges (HmwdLayer* self);
void hmwd_layer_printValues (HmwdLayer* self);
void hmwd_layer_printTiles (HmwdLayer* self);
void hmwd_layer_printAll (HmwdLayer* self);
const gchar* hmwd_layer_get_name (HmwdLayer* self);
void hmwd_layer_set_name (HmwdLayer* self, const gchar* value);
gdouble hmwd_layer_get_zoff (HmwdLayer* self);
void hmwd_layer_set_zoff (HmwdLayer* self, gdouble value);
guint hmwd_layer_get_width (HmwdLayer* self);
void hmwd_layer_set_width (HmwdLayer* self, guint value);
guint hmwd_layer_get_height (HmwdLayer* self);
void hmwd_layer_set_height (HmwdLayer* self, guint value);
HmwdTile** hmwd_layer_get_tiles (HmwdLayer* self, int* result_length1, int* result_length2);
void hmwd_layer_set_tiles (HmwdLayer* self, HmwdTile** value, int value_length1, int value_length2);
gboolean hmwd_layer_get_collision (HmwdLayer* self);
void hmwd_layer_set_collision (HmwdLayer* self, gboolean value);
GType hmwd_logical_tile_get_type (void) G_GNUC_CONST;
HmwdLogicalTile* hmwd_logical_tile_new (void);
HmwdLogicalTile* hmwd_logical_tile_construct (GType object_type);
GType hmwd_tile_type_get_type (void) G_GNUC_CONST;
HmwdTileType hmwd_logical_tile_get_tile_type (HmwdLogicalTile* self);
void hmwd_logical_tile_set_tile_type (HmwdLogicalTile* self, HmwdTileType value);
GType hmwd_plant_get_type (void) G_GNUC_CONST;
HmwdPlant* hmwd_logical_tile_get_plant (HmwdLogicalTile* self);
void hmwd_logical_tile_set_plant (HmwdLogicalTile* self, HmwdPlant* value);
GType hmwd_data_get_type (void) G_GNUC_CONST;
HmwdData* hmwd_data_new (void);
HmwdData* hmwd_data_construct (GType object_type);
void hmwd_data_loadTileSetManager (HmwdData* self, const gchar* folder);
void hmwd_data_loadMapManager (HmwdData* self, const gchar* folder);
void hmwd_data_loadSpriteSetManager (HmwdData* self, const gchar* folder);
void hmwd_data_printAll (HmwdData* self);
GType hmwd_tile_set_manager_get_type (void) G_GNUC_CONST;
HmwdTileSetManager* hmwd_data_get_tilesetmanager (HmwdData* self);
void hmwd_data_set_tilesetmanager (HmwdData* self, HmwdTileSetManager* value);
GType hmwd_map_manager_get_type (void) G_GNUC_CONST;
HmwdMapManager* hmwd_data_get_mapmanager (HmwdData* self);
void hmwd_data_set_mapmanager (HmwdData* self, HmwdMapManager* value);
GType hmwd_sprite_set_manager_get_type (void) G_GNUC_CONST;
HmwdSpriteSetManager* hmwd_data_get_spritesetmanager (HmwdData* self);
void hmwd_data_set_spritesetmanager (HmwdData* self, HmwdSpriteSetManager* value);
HmwdMapManager* hmwd_map_manager_new (const gchar* folder, HmwdTileSetManager* tilesetmanager);
HmwdMapManager* hmwd_map_manager_construct (GType object_type, const gchar* folder, HmwdTileSetManager* tilesetmanager);
GType hmwd_map_get_type (void) G_GNUC_CONST;
HmwdMap* hmwd_map_manager_getMapFromIndex (HmwdMapManager* self, gint index);
gchar* hmwd_map_manager_getMapFilenameFromIndex (HmwdMapManager* self, gint index);
HmwdMap* hmwd_map_manager_getFromFilename (HmwdMapManager* self, const gchar* filename);
void hmwd_map_manager_printAll (HmwdMapManager* self);
const gchar* hmwd_map_manager_get_folder (HmwdMapManager* self);
void hmwd_map_manager_set_folder (HmwdMapManager* self, const gchar* value);
HmwdTileSetManager* hmwd_map_manager_get_tilesetmanager (HmwdMapManager* self);
void hmwd_map_manager_set_tilesetmanager (HmwdMapManager* self, HmwdTileSetManager* value);
gint hmwd_map_manager_get_length (HmwdMapManager* self);
gint hmwd_map_manager_get_size (HmwdMapManager* self);
HmwdMap* hmwd_map_new (void);
HmwdMap* hmwd_map_construct (GType object_type);
HmwdMap* hmwd_map_new_fromPath (const gchar* path, const gchar* filename, HmwdTileSetManager* tilesetmanager);
HmwdMap* hmwd_map_construct_fromPath (GType object_type, const gchar* path, const gchar* filename, HmwdTileSetManager* tilesetmanager);
void hmwd_map_setFromPath (HmwdMap* self, const gchar* path, const gchar* filename, HmwdTileSetManager* tilesetmanager);
GType hmwd_tile_set_reference_get_type (void) G_GNUC_CONST;
HmwdTileSetReference* hmwd_map_getTileSetRefFromGid (GeeList* tilesetrefs, guint gid);
HmwdTileSetReference* hmwd_map_getTileSetRefFromGidFromOwn (HmwdMap* self, gint gid);
gint hmwd_map_getTileSetIndexFromGid (HmwdMap* self, gint gid);
gint hmwd_map_getTileSetIndexFromPosition (HmwdMap* self, gint x, gint y, gint layer_index);
gint hmwd_map_getTileIDFromGid (HmwdMap* self, gint gid);
gint hmwd_map_getTileIDFromPosition (HmwdMap* self, gint x, gint y, gint layer_index);
gint hmwd_map_getTileGIDFromPosition (HmwdMap* self, gint x, gint y, gint layer_index);
HmwdLayer* hmwd_map_getLayerFromName (HmwdMap* self, const gchar* name);
HmwdLayer* hmwd_map_getLayerFromIndex (HmwdMap* self, gint index);
HmwdLayer* hmwd_map_getLayerFromIndexInverse (HmwdMap* self, gint index);
gint hmwd_map_getIndexOfLayerName (HmwdMap* self, const gchar* name);
gboolean hmwd_map_walkable (HmwdMap* self, guint x, guint y);
void hmwd_map_printValues (HmwdMap* self);
void hmwd_map_printLayers (HmwdMap* self);
void hmwd_map_printTileSets (HmwdMap* self);
void hmwd_map_printAll (HmwdMap* self);
const gchar* hmwd_map_get_orientation (HmwdMap* self);
void hmwd_map_set_orientation (HmwdMap* self, const gchar* value);
const gchar* hmwd_map_get_version (HmwdMap* self);
void hmwd_map_set_version (HmwdMap* self, const gchar* value);
guint hmwd_map_get_width (HmwdMap* self);
void hmwd_map_set_width (HmwdMap* self, guint value);
guint hmwd_map_get_height (HmwdMap* self);
void hmwd_map_set_height (HmwdMap* self, guint value);
guint hmwd_map_get_pxl_width (HmwdMap* self);
guint hmwd_map_get_pxl_height (HmwdMap* self);
guint hmwd_map_get_tilewidth (HmwdMap* self);
void hmwd_map_set_tilewidth (HmwdMap* self, guint value);
guint hmwd_map_get_tileheight (HmwdMap* self);
void hmwd_map_set_tileheight (HmwdMap* self, guint value);
const gchar* hmwd_map_get_filename (HmwdMap* self);
void hmwd_map_set_filename (HmwdMap* self, const gchar* value);
const gchar* hmwd_map_get_path (HmwdMap* self);
GeeList* hmwd_map_get_tileset (HmwdMap* self);
void hmwd_map_set_tileset (HmwdMap* self, GeeList* value);
GeeList* hmwd_map_get_layers_over (HmwdMap* self);
void hmwd_map_set_layers_over (HmwdMap* self, GeeList* value);
GeeList* hmwd_map_get_layers_same (HmwdMap* self);
void hmwd_map_set_layers_same (HmwdMap* self, GeeList* value);
GeeList* hmwd_map_get_layers_under (HmwdMap* self);
void hmwd_map_set_layers_under (HmwdMap* self, GeeList* value);
gint hmwd_map_get_all_layer_size (HmwdMap* self);
GeeList* hmwd_map_get_entities (HmwdMap* self);
void hmwd_map_set_entities (HmwdMap* self, GeeList* value);
HmwdLogicalTile** hmwd_map_get_tiles (HmwdMap* self, int* result_length1, int* result_length2);
void hmwd_map_set_tiles (HmwdMap* self, HmwdLogicalTile** value, int value_length1, int value_length2);
HmwdTileSetManager* hmwd_map_get_tilesetmanager (HmwdMap* self);
void hmwd_map_set_tilesetmanager (HmwdMap* self, HmwdTileSetManager* value);
GType hmwd_matrix_get_type (void) G_GNUC_CONST;
HmwdMatrix* hmwd_matrix_new_square (gint n);
HmwdMatrix* hmwd_matrix_construct_square (GType object_type, gint n);
HmwdMatrix* hmwd_matrix_new (gint n, gint m);
HmwdMatrix* hmwd_matrix_construct (GType object_type, gint n, gint m);
HmwdMatrix* hmwd_matrix_new_copy (HmwdMatrix* m);
HmwdMatrix* hmwd_matrix_construct_copy (GType object_type, HmwdMatrix* m);
HmwdMatrix* hmwd_matrix_unityMatrix (HmwdMatrix* self);
HmwdMatrix* hmwd_matrix_nullMatrix (HmwdMatrix* self);
HmwdMatrix* hmwd_matrix_copyMatrix (HmwdMatrix* self, HmwdMatrix* c);
HmwdMatrix* hmwd_matrix_translationMatrix (HmwdMatrix* self, HmwdVector* t);
HmwdMatrix* hmwd_matrix_scalingMatrix (HmwdMatrix* self, HmwdVector* s);
HmwdMatrix* hmwd_matrix_rotationMatrix (HmwdMatrix* self, gdouble angle, HmwdVector* axis);
HmwdMatrix* hmwd_matrix_multMatrix (HmwdMatrix* self, HmwdMatrix* l, HmwdMatrix* r);
HmwdMatrix* hmwd_matrix_multMatrixScalar (HmwdMatrix* self, HmwdMatrix* o, gdouble s);
HmwdMatrix* hmwd_matrix_addMatrix (HmwdMatrix* self, HmwdMatrix* l, HmwdMatrix* r);
HmwdMatrix* hmwd_matrix_transposeMatrix (HmwdMatrix* self, HmwdMatrix* op);
HmwdMatrix* hmwd_matrix_mkTrans (HmwdMatrix* self, HmwdVector* t);
HmwdMatrix* hmwd_matrix_mkScale (HmwdMatrix* self, HmwdVector* s);
HmwdMatrix* hmwd_matrix_mkRot (HmwdMatrix* self, gdouble arc, HmwdVector* axis);
HmwdMatrix* hmwd_matrix_mult (HmwdMatrix* self, HmwdMatrix* r);
HmwdMatrix* hmwd_matrix_multScalar (HmwdMatrix* self, gdouble s);
HmwdVector* hmwd_matrix_multVector (HmwdMatrix* self, HmwdVector* v);
HmwdMatrix* hmwd_matrix_add (HmwdMatrix* self, HmwdMatrix* r);
HmwdMatrix* hmwd_matrix_transpose (HmwdMatrix* self);
gchar* hmwd_matrix_toString (HmwdMatrix* self);
gint hmwd_matrix_get_n (HmwdMatrix* self);
void hmwd_matrix_set_n (HmwdMatrix* self, gint value);
gint hmwd_matrix_get_m (HmwdMatrix* self);
void hmwd_matrix_set_m (HmwdMatrix* self, gint value);
extern guint hmwd_plant_timeBetweenCrops;
extern guint hmwd_plant_maxCrops;
GType hmwd_crop_type_get_type (void) G_GNUC_CONST;
extern HmwdCropType hmwd_plant_crop;
HmwdPlant* hmwd_plant_construct (GType object_type);
void hmwd_plant_grow (HmwdPlant* self);
void hmwd_plant_water (HmwdPlant* self);
HmwdCropType hmwd_plant_harvest (HmwdPlant* self);
GType hmwd_regular_tile_get_type (void) G_GNUC_CONST;
HmwdRegularTile* hmwd_regular_tile_new (void);
HmwdRegularTile* hmwd_regular_tile_construct (GType object_type);
HmwdRegularTile* hmwd_regular_tile_new_fromPixbuf (GdkPixbuf* pixbuf);
HmwdRegularTile* hmwd_regular_tile_construct_fromPixbuf (GType object_type, GdkPixbuf* pixbuf);
GType hmwd_split_tile_get_type (void) G_GNUC_CONST;
GType hmwd_sub_tile_get_type (void) G_GNUC_CONST;
HmwdSplitTile* hmwd_split_tile_new (void);
HmwdSplitTile* hmwd_split_tile_construct (GType object_type);
GType hmwd_sprite_layer_get_type (void) G_GNUC_CONST;
GType hmwd_sprite_get_type (void) G_GNUC_CONST;
GType hmwd_sprite_layer_type_get_type (void) G_GNUC_CONST;
HmwdSpriteLayer* hmwd_sprite_layer_new (gint number, const gchar* name, const gchar* image_filename, HmwdSpriteLayerType type, const gchar* trans, guint count_x, guint count_y, guint spritewidth, guint spriteheight);
HmwdSpriteLayer* hmwd_sprite_layer_construct (GType object_type, gint number, const gchar* name, const gchar* image_filename, HmwdSpriteLayerType type, const gchar* trans, guint count_x, guint count_y, guint spritewidth, guint spriteheight);
void hmwd_sprite_layer_printSprites (HmwdSpriteLayer* self);
void hmwd_sprite_layer_printAll (HmwdSpriteLayer* self);
void hmwd_sprite_layer_printValues (HmwdSpriteLayer* self);
HmwdSpriteLayerType hmwd_sprite_layer_get_sprite_layer_type (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_sprite_layer_type (HmwdSpriteLayer* self, HmwdSpriteLayerType value);
gboolean hmwd_sprite_layer_get_active (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_active (HmwdSpriteLayer* self, gboolean value);
const gchar* hmwd_sprite_layer_get_name (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_name (HmwdSpriteLayer* self, const gchar* value);
gint hmwd_sprite_layer_get_number (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_number (HmwdSpriteLayer* self, gint value);
const gchar* hmwd_sprite_layer_get_image_filename (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_image_filename (HmwdSpriteLayer* self, const gchar* value);
guint hmwd_sprite_layer_get_width (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_width (HmwdSpriteLayer* self, guint value);
guint hmwd_sprite_layer_get_height (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_height (HmwdSpriteLayer* self, guint value);
guint hmwd_sprite_layer_get_spritewidth (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_spritewidth (HmwdSpriteLayer* self, guint value);
guint hmwd_sprite_layer_get_spriteheight (HmwdSpriteLayer* self);
void hmwd_sprite_layer_set_spriteheight (HmwdSpriteLayer* self, guint value);
HmwdSpriteSetManager* hmwd_sprite_set_manager_new (const gchar* folder);
HmwdSpriteSetManager* hmwd_sprite_set_manager_construct (GType object_type, const gchar* folder);
void hmwd_sprite_set_manager_loadAllFromFolder (HmwdSpriteSetManager* self, const gchar* folder);
HmwdSpriteSet* hmwd_sprite_set_manager_getFromName (HmwdSpriteSetManager* self, const gchar* name);
HmwdSpriteSet* hmwd_sprite_set_manager_getFromFilename (HmwdSpriteSetManager* self, const gchar* filename);
void hmwd_sprite_set_manager_printAll (HmwdSpriteSetManager* self);
const gchar* hmwd_sprite_set_manager_get_folder (HmwdSpriteSetManager* self);
void hmwd_sprite_set_manager_set_folder (HmwdSpriteSetManager* self, const gchar* value);
HmwdSpriteSet* hmwd_sprite_set_new (void);
HmwdSpriteSet* hmwd_sprite_set_construct (GType object_type);
HmwdSpriteSet* hmwd_sprite_set_new_fromPath (const gchar* folder, const gchar* filename);
HmwdSpriteSet* hmwd_sprite_set_construct_fromPath (GType object_type, const gchar* folder, const gchar* filename);
void hmwd_sprite_set_set_Animation (HmwdSpriteSet* self, const gchar* name, HmwdDirection direction);
HmwdSpriteLayer* hmwd_sprite_set_get_baseLayer (HmwdSpriteSet* self);
void hmwd_sprite_set_printSpriteLayers (HmwdSpriteSet* self);
void hmwd_sprite_set_printAnimation (HmwdSpriteSet* self);
void hmwd_sprite_set_printValues (HmwdSpriteSet* self);
void hmwd_sprite_set_printAll (HmwdSpriteSet* self);
const gchar* hmwd_sprite_set_get_filename (HmwdSpriteSet* self);
void hmwd_sprite_set_set_filename (HmwdSpriteSet* self, const gchar* value);
const gchar* hmwd_sprite_set_get_folder (HmwdSpriteSet* self);
void hmwd_sprite_set_set_folder (HmwdSpriteSet* self, const gchar* value);
guint hmwd_sprite_set_get_pixelwidth (HmwdSpriteSet* self);
guint hmwd_sprite_set_get_pixelheight (HmwdSpriteSet* self);
HmwdSprite* hmwd_sprite_new (GdkPixbuf* pixbuf);
HmwdSprite* hmwd_sprite_construct (GType object_type, GdkPixbuf* pixbuf);
void hmwd_sprite_printValues (HmwdSprite* self);
void hmwd_sprite_printAll (HmwdSprite* self);
void hmwd_sprite_save (HmwdSprite* self, const gchar* filename);
GType hmwd_gdk_texture_get_type (void) G_GNUC_CONST;
HmwdGdkTexture* hmwd_sprite_get_tex (HmwdSprite* self);
void hmwd_sprite_set_tex (HmwdSprite* self, HmwdGdkTexture* value);
gdouble hmwd_sprite_get_width (HmwdSprite* self);
gdouble hmwd_sprite_get_height (HmwdSprite* self);
HmwdSubTile* hmwd_sub_tile_new (void);
HmwdSubTile* hmwd_sub_tile_construct (GType object_type);
void hmwd_sub_tile_calcEdge (HmwdSubTile* self, HmwdTileType* neighbours, int neighbours_length1, HmwdTileType type, guint location);
GType hmwd_edge_shape_get_type (void) G_GNUC_CONST;
HmwdEdgeShape hmwd_sub_tile_get_edge (HmwdSubTile* self);
void hmwd_sub_tile_set_edge (HmwdSubTile* self, HmwdEdgeShape value);
HmwdTileSetManager* hmwd_tile_set_manager_new (const gchar* folder);
HmwdTileSetManager* hmwd_tile_set_manager_construct (GType object_type, const gchar* folder);
GType hmwd_tile_set_get_type (void) G_GNUC_CONST;
HmwdTileSet* hmwd_tile_set_manager_getFromName (HmwdTileSetManager* self, const gchar* name);
HmwdTileSet* hmwd_tile_set_manager_getFromFilename (HmwdTileSetManager* self, const gchar* filename);
HmwdTileSet* hmwd_tile_set_manager_getFromSource (HmwdTileSetManager* self, const gchar* source);
gchar* hmwd_tile_set_manager_getSourcesFromIndex (HmwdTileSetManager* self, gint index);
HmwdTileSet* hmwd_tile_set_manager_getFromIndex (HmwdTileSetManager* self, gint index);
void hmwd_tile_set_manager_printAll (HmwdTileSetManager* self);
const gchar* hmwd_tile_set_manager_get_folder (HmwdTileSetManager* self);
void hmwd_tile_set_manager_set_folder (HmwdTileSetManager* self, const gchar* value);
gint hmwd_tile_set_manager_get_size (HmwdTileSetManager* self);
HmwdTileSetReference* hmwd_tile_set_reference_new (guint firstgid, HmwdTileSet* source);
HmwdTileSetReference* hmwd_tile_set_reference_construct (GType object_type, guint firstgid, HmwdTileSet* source);
void hmwd_tile_set_reference_printValues (HmwdTileSetReference* self);
HmwdTileSet* hmwd_tile_set_reference_get_source (HmwdTileSetReference* self);
void hmwd_tile_set_reference_set_source (HmwdTileSetReference* self, HmwdTileSet* value);
guint hmwd_tile_set_reference_get_firstgid (HmwdTileSetReference* self);
void hmwd_tile_set_reference_set_firstgid (HmwdTileSetReference* self, guint value);
HmwdTileSet* hmwd_tile_set_new (void);
HmwdTileSet* hmwd_tile_set_construct (GType object_type);
HmwdTileSet* hmwd_tile_set_new_fromPath (const gchar* folder, const gchar* filename);
HmwdTileSet* hmwd_tile_set_construct_fromPath (GType object_type, const gchar* folder, const gchar* filename);
void hmwd_tile_set_loadFromPath (HmwdTileSet* self, const gchar* folder, const gchar* filename);
HmwdTile* hmwd_tile_set_getTileFromIndex (HmwdTileSet* self, guint index);
void hmwd_tile_set_save (HmwdTileSet* self, const gchar* folder);
void hmwd_tile_set_printTiles (HmwdTileSet* self);
void hmwd_tile_set_printValues (HmwdTileSet* self);
void hmwd_tile_set_printAll (HmwdTileSet* self);
const gchar* hmwd_tile_set_get_filename (HmwdTileSet* self);
void hmwd_tile_set_set_filename (HmwdTileSet* self, const gchar* value);
const gchar* hmwd_tile_set_get_source (HmwdTileSet* self);
void hmwd_tile_set_set_source (HmwdTileSet* self, const gchar* value);
guint hmwd_tile_set_get_count_y (HmwdTileSet* self);
guint hmwd_tile_set_get_count_x (HmwdTileSet* self);
HmwdTile* hmwd_tile_construct (GType object_type);
void hmwd_tile_save (HmwdTile* self, const gchar* filename);
void hmwd_tile_printValues (HmwdTile* self);
void hmwd_tile_calcEdges (HmwdTile* self, HmwdTileType* neighbours, int neighbours_length1);
HmwdGdkTexture* hmwd_tile_get_tex (HmwdTile* self);
void hmwd_tile_set_tex (HmwdTile* self, HmwdGdkTexture* value);
gint hmwd_tile_get_gid (HmwdTile* self);
void hmwd_tile_set_gid (HmwdTile* self, gint value);
gdouble hmwd_tile_get_width (HmwdTile* self);
gdouble hmwd_tile_get_height (HmwdTile* self);
HmwdTileType hmwd_tile_get_tile_type (HmwdTile* self);
void hmwd_tile_set_tile_type (HmwdTile* self, HmwdTileType value);
gchar* hmwd_direction_to_string (HmwdDirection self);
HmwdDirection hmwd_direction_parse (const gchar* str);
HmwdSpriteLayerType hmwd_sprite_layer_type_parse (const gchar* str);
HmwdCoord* hmwd_coord_new (void);
HmwdCoord* hmwd_coord_construct (GType object_type);
HmwdCoord* hmwd_coord_new_nondefault (gdouble x, gdouble y);
HmwdCoord* hmwd_coord_construct_nondefault (GType object_type, gdouble x, gdouble y);
gdouble hmwd_coord_get_x (HmwdCoord* self);
void hmwd_coord_set_x (HmwdCoord* self, gdouble value);
gdouble hmwd_coord_get_y (HmwdCoord* self);
void hmwd_coord_set_y (HmwdCoord* self, gdouble value);
GType hmwd_mirror_get_type (void) G_GNUC_CONST;
HmwdAnimationData* hmwd_animation_data_new (void);
HmwdAnimationData* hmwd_animation_data_construct (GType object_type);
gchar* hmwd_animation_data_to_string (HmwdAnimationData* self);
HmwdCoord* hmwd_animation_data_get_coord (HmwdAnimationData* self);
gdouble hmwd_animation_data_get_x (HmwdAnimationData* self);
void hmwd_animation_data_set_x (HmwdAnimationData* self, gdouble value);
gdouble hmwd_animation_data_get_y (HmwdAnimationData* self);
void hmwd_animation_data_set_y (HmwdAnimationData* self, gdouble value);
gchar* hmwd_mirror_to_string (HmwdMirror self);
HmwdMirror hmwd_mirror_parse (const gchar* str);
GType hmwd_colorspace_get_type (void) G_GNUC_CONST;
gchar* hmwd_colorspace_to_string (HmwdColorspace self);
HmwdColorspace hmwd_colorspace_fromGdkPixbuf (GdkPixbuf* pixbuf);
gint hmwd_colorspace_to_channel (HmwdColorspace self);
gboolean hmwd_colorspace_has_alpha (HmwdColorspace self);
GType hmwd_draw_level_get_type (void) G_GNUC_CONST;
HmwdDrawLevel hmwd_draw_level_parse (const gchar* str);
gint hmwd_Round (gdouble num);
gboolean hmwd_toggle (gboolean b);
GType hmwd_view_engine_get_type (void) G_GNUC_CONST;
GType hmwd_season_get_type (void) G_GNUC_CONST;
HmwdVector* hmwd_vector_new (gint dim);
HmwdVector* hmwd_vector_construct (GType object_type, gint dim);
HmwdVector* hmwd_vector_new_fromDifference (HmwdVector* v1, HmwdVector* v2);
HmwdVector* hmwd_vector_construct_fromDifference (GType object_type, HmwdVector* v1, HmwdVector* v2);
HmwdVector* hmwd_vector_addVector (HmwdVector* self, HmwdVector* v);
gdouble hmwd_vector_ScalarProduct (HmwdVector* self, HmwdVector* v);
HmwdVector* hmwd_vector_VectorProduct (HmwdVector* self, HmwdVector* v);
HmwdVector* hmwd_vector_divideByScalar (HmwdVector* self, gdouble s);
HmwdVector* hmwd_vector_multScalar (HmwdVector* self, gdouble s);
gdouble hmwd_vector_VectorNorm (HmwdVector* self);
HmwdVector* hmwd_vector_normVector (HmwdVector* self);
HmwdVector* hmwd_vector_multMatrix (HmwdVector* self, HmwdMatrix* m, HmwdVector* v);
HmwdVector* hmwd_vector_crop (HmwdVector* self, HmwdVector* min, HmwdVector* max);
gint hmwd_vector_get_dim (HmwdVector* self);
void hmwd_vector_set_dim (HmwdVector* self, gint value);
guint8* hmwd_gdk_texture_copy_pixels (HmwdGdkTexture* self, int* result_length1);
guint8 hmwd_gdk_texture_copy_pixel (HmwdGdkTexture* self, gint n);
guint8* hmwd_gdk_texture_save_to_buffer (HmwdGdkTexture* self, const gchar* type, int* result_length1);
gchar* hmwd_gdk_texture_save_to_buffer_string (HmwdGdkTexture* self, const gchar* type);
HmwdGdkTexture* hmwd_gdk_texture_new (void);
HmwdGdkTexture* hmwd_gdk_texture_construct (GType object_type);
HmwdGdkTexture* hmwd_gdk_texture_new_fromFile (const gchar* path);
HmwdGdkTexture* hmwd_gdk_texture_construct_fromFile (GType object_type, const gchar* path);
HmwdGdkTexture* hmwd_gdk_texture_new_fromPixbuf (GdkPixbuf* pixbuf);
HmwdGdkTexture* hmwd_gdk_texture_construct_fromPixbuf (GType object_type, GdkPixbuf* pixbuf);
void hmwd_gdk_texture_loadFromFile (HmwdGdkTexture* self, const gchar* path);
void hmwd_gdk_texture_loadFromPixbuf (HmwdGdkTexture* self, GdkPixbuf* pixbuf);
void hmwd_gdk_texture_save (HmwdGdkTexture* self, const gchar* filename);
void hmwd_gdk_texture_printValues (HmwdGdkTexture* self);
GdkPixbuf* hmwd_gdk_texture_get_pixbuf (HmwdGdkTexture* self);
void hmwd_gdk_texture_set_pixbuf (HmwdGdkTexture* self, GdkPixbuf* value);
const gchar* hmwd_gdk_texture_get_path (HmwdGdkTexture* self);
void hmwd_gdk_texture_set_path (HmwdGdkTexture* self, const gchar* value);
gdouble hmwd_gdk_texture_get_width (HmwdGdkTexture* self);
void hmwd_gdk_texture_set_width (HmwdGdkTexture* self, gdouble value);
gdouble hmwd_gdk_texture_get_height (HmwdGdkTexture* self);
void hmwd_gdk_texture_set_height (HmwdGdkTexture* self, gdouble value);
HmwdColorspace hmwd_gdk_texture_get_colorspace (HmwdGdkTexture* self);
guint hmwd_gdk_texture_get_length (HmwdGdkTexture* self);
guint8* hmwd_gdk_texture_get_pixels (HmwdGdkTexture* self, int* result_length1);
const gchar* hmwd_gdk_texture_get_string_pixels (HmwdGdkTexture* self);
gboolean hmwd_gdk_texture_get_has_alpha (HmwdGdkTexture* self);


G_END_DECLS

#endif
