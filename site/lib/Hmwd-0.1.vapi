/* Hmwd-0.1.vapi generated by valac 0.16.1, do not modify. */

namespace Hmwd {
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Animation : GLib.Object {
		public Animation (string name, bool repeat, Hmwd.Direction direction, Gee.List<Hmwd.AnimationData> animationdata);
		public Hmwd.AnimationData get_AnimationData ();
		public void printAll ();
		public void printAnimationData ();
		public void printValues ();
		public Gee.List<Hmwd.AnimationData> animationdata { get; set construct; }
		public int current_frame_index { get; set; }
		public Hmwd.Direction direction { get; set construct; }
		public double frame_ps { get; set; }
		public string name { get; set construct; }
		public bool repeat { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class AnimationData : GLib.Object {
		public Hmwd.Mirror mirror;
		public AnimationData ();
		public string to_string ();
		public Hmwd.Coord coord { get; private set; }
		public double x { get; set; }
		public double y { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Coord : Hmwd.Vector {
		public Coord ();
		public Coord.nondefault (double x, double y);
		public double x { get; set; }
		public double y { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Data : GLib.Object {
		public Data ();
		public void loadMapManager (string folder);
		public void loadSpriteSetManager (string folder);
		public void loadTileSetManager (string folder);
		public void printAll ();
		public Hmwd.MapManager mapmanager { get; set; }
		public Hmwd.SpriteSetManager spritesetmanager { get; set; }
		public Hmwd.TileSetManager tilesetmanager { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class DialogTree : GLib.Object {
		public DialogTree (string q, string a, Hmwd.DialogTree[] c);
		public void chooseAnswer (bool next);
		public Hmwd.DialogTree getAnswer ();
		public string getText ();
		public string answer { get; set construct; }
		public Hmwd.DialogTree[] children { get; private set; }
		public int choice { get; set construct; }
		public string question { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public abstract class Entity : GLib.Object {
		public Entity ();
		public virtual void age ();
		public static int compare (Hmwd.Entity a, Hmwd.Entity b);
		public void setMotion (Hmwd.Direction d, bool motion);
		public double collisionRadius { get; protected set; }
		public Hmwd.Direction direction { get; set; }
		public bool motion { get; protected set; }
		public Hmwd.Coord pos { get; protected set; }
		public Hmwd.SpriteSet spriteset { get; set; }
		public double steps_ps { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class GdkTexture : GLib.Object {
		public GdkTexture ();
		public uint8 copy_pixel (int n);
		public uint8[] copy_pixels ();
		public GdkTexture.fromFile (string path);
		public GdkTexture.fromPixbuf (Gdk.Pixbuf pixbuf);
		protected void loadFromFile (string path);
		public void loadFromPixbuf (Gdk.Pixbuf pixbuf);
		public void printValues ();
		public void save (string filename);
		public uint8[] save_to_buffer (string type);
		public string save_to_buffer_string (string type);
		public Hmwd.Colorspace colorspace { get; }
		public bool has_alpha { get; }
		public double height { get; set; }
		public uint length { get; }
		public string path { get; set construct; }
		public Gdk.Pixbuf pixbuf { get; set construct; }
		public uint8[] pixels { get; }
		public string string_pixels { get; }
		public double width { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Layer : GLib.Object {
		public Layer ();
		public Layer.all (string name, double zoff, bool collision, int width, int height);
		public void calcEdges ();
		public Hmwd.Tile? getTileXY (uint x, uint y);
		public void printAll ();
		public void printTiles ();
		public void printValues ();
		public Layer.sized (int width, int height);
		public bool collision { get; set; }
		public uint height { get; set; }
		public string name { get; set; }
		public Hmwd.Tile[,] tiles { get; set; }
		public uint width { get; set; }
		public double zoff { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class LogicalTile : GLib.Object {
		public LogicalTile ();
		public Hmwd.Plant plant { get; set; }
		public Hmwd.TileType tile_type { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Map : GLib.Object {
		public Map ();
		public Map.fromPath (string path, string filename, Hmwd.TileSetManager tilesetmanager);
		public int getIndexOfLayerName (string name);
		public Hmwd.Layer? getLayerFromIndex (int index);
		public Hmwd.Layer? getLayerFromIndexInverse (int index);
		public Hmwd.Layer? getLayerFromName (string name);
		public int getTileGIDFromPosition (int x, int y, int layer_index);
		public int getTileIDFromGid (int gid);
		public int getTileIDFromPosition (int x, int y, int layer_index);
		public Hmwd.TileSet getTileSetFromIndex (int index);
		public int getTileSetIndexFromGid (int gid);
		public int getTileSetIndexFromPosition (int x, int y, int layer_index);
		public static Hmwd.TileSetReference getTileSetRefFromGid (Gee.List<Hmwd.TileSetReference> tilesetrefs, uint gid);
		public Hmwd.TileSetReference getTileSetRefFromGidFromOwn (int gid);
		public Hmwd.TileSetReference getTileSetRefFromIndex (int index);
		public string getTileSetSourceFromIndex (int index);
		public void printAll ();
		public void printLayers ();
		public void printTileSets ();
		public void printValues ();
		public void setFromPath (string path, string filename, Hmwd.TileSetManager tilesetmanager);
		public bool walkable (uint x, uint y);
		public int all_layer_size { get; }
		public Gee.List<Hmwd.Entity> entities { get; set; }
		public string filename { get; set construct; }
		public uint height { get; set; }
		public Gee.List<Hmwd.Layer> layers_over { get; set; }
		public Gee.List<Hmwd.Layer> layers_same { get; set; }
		public Gee.List<Hmwd.Layer> layers_under { get; set; }
		public string orientation { get; set; }
		public string path { get; construct; }
		public uint pxl_height { get; }
		public uint pxl_width { get; }
		public uint tileheight { get; set; }
		public Hmwd.LogicalTile[,] tiles { get; set; }
		public Gee.List<Hmwd.TileSetReference> tileset { get; set; }
		public int tileset_size { get; }
		public Hmwd.TileSetManager tilesetmanager { get; set construct; }
		public uint tilewidth { get; set; }
		public string version { get; set; }
		public uint width { get; set; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class MapManager : GLib.Object {
		public MapManager (string folder, Hmwd.TileSetManager tilesetmanager);
		public Hmwd.Map getFromFilename (string filename);
		public string getMapFilenameFromIndex (int index);
		public Hmwd.Map getMapFromIndex (int index);
		public void printAll ();
		public string folder { get; set construct; }
		public int length { get; }
		public int size { get; }
		public Hmwd.TileSetManager tilesetmanager { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Matrix : GLib.Object {
		public double[,] mat;
		public bool sq;
		public Matrix (int n, int m);
		public Hmwd.Matrix add (Hmwd.Matrix r);
		public Hmwd.Matrix addMatrix (Hmwd.Matrix l, Hmwd.Matrix r);
		public Matrix.copy (Hmwd.Matrix m);
		public Hmwd.Matrix copyMatrix (Hmwd.Matrix c);
		public Hmwd.Matrix mkRot (double arc, Hmwd.Vector axis);
		public Hmwd.Matrix mkScale (Hmwd.Vector s);
		public Hmwd.Matrix mkTrans (Hmwd.Vector t);
		public Hmwd.Matrix mult (Hmwd.Matrix r);
		public Hmwd.Matrix multMatrix (Hmwd.Matrix l, Hmwd.Matrix r);
		public Hmwd.Matrix multMatrixScalar (Hmwd.Matrix o, double s);
		public Hmwd.Matrix multScalar (double s);
		public Hmwd.Vector multVector (Hmwd.Vector v);
		public Hmwd.Matrix nullMatrix ();
		public Hmwd.Matrix rotationMatrix (double angle, Hmwd.Vector axis);
		public Hmwd.Matrix scalingMatrix (Hmwd.Vector s);
		public Matrix.square (int n);
		public string toString ();
		public Hmwd.Matrix translationMatrix (Hmwd.Vector t);
		public Hmwd.Matrix transpose ();
		public Hmwd.Matrix transposeMatrix (Hmwd.Matrix op);
		public Hmwd.Matrix unityMatrix ();
		public int m { get; set construct; }
		public int n { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public abstract class Plant : GLib.Object {
		protected bool alive;
		protected static Hmwd.CropType crop;
		protected uint cropsLeft;
		protected uint daysUntilHarvest;
		protected static uint maxCrops;
		public Hmwd.SpriteSet spriteset;
		protected static uint timeBetweenCrops;
		protected bool watered;
		public Plant ();
		public void grow ();
		public Hmwd.CropType harvest ();
		public void water ();
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class RegularTile : Hmwd.Tile {
		public RegularTile ();
		public override void calcEdges (Hmwd.TileType[] neighbours);
		public RegularTile.fromPixbuf (Gdk.Pixbuf pixbuf);
		public override void printValues ();
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class SplitTile : Hmwd.Tile {
		public Hmwd.SubTile[] subTiles;
		public SplitTile ();
		public override void calcEdges (Hmwd.TileType[] neighbours);
		public override void printValues ();
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Sprite : GLib.Object {
		public Sprite (Gdk.Pixbuf pixbuf);
		public void printAll ();
		public void printValues ();
		public void save (string filename);
		public double height { get; }
		public Hmwd.GdkTexture tex { get; set; }
		public double width { get; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class SpriteLayer : GLib.Object {
		public Hmwd.Sprite[,] sprites;
		public string trans;
		public SpriteLayer (string folder, int number, string name, string image_filename, Hmwd.SpriteLayerType type, string trans, uint count_x, uint count_y, uint spritewidth, uint spriteheight);
		public void printAll ();
		public void printSprites ();
		public void printValues ();
		public bool active { get; set construct; }
		public string folder { get; set construct; }
		public uint height { get; set construct; }
		public string image_filename { get; set construct; }
		public string name { get; set construct; }
		public int number { get; set construct; }
		public Hmwd.SpriteLayerType sprite_layer_type { get; set construct; }
		public uint spriteheight { get; set construct; }
		public uint spritewidth { get; set construct; }
		public uint width { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class SpriteSet : GLib.Object {
		public Gee.List<Hmwd.Animation> animations;
		public Hmwd.Animation current_animation;
		public uint height;
		public string name;
		public uint spriteheight;
		public Gee.List<Hmwd.SpriteLayer> spritelayers;
		public uint spritewidth;
		public string version;
		public uint width;
		public SpriteSet ();
		public SpriteSet.fromPath (string folder, string filename);
		public Hmwd.SpriteLayer? get_baseLayer ();
		public void printAll ();
		public void printAnimation ();
		public void printSpriteLayers ();
		public void printValues ();
		public void set_Animation (string name, Hmwd.Direction direction);
		public string filename { get; set construct; }
		public string folder { get; set construct; }
		public uint pixelheight { get; }
		public uint pixelwidth { get; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class SpriteSetManager : GLib.Object {
		public Gee.List<Hmwd.SpriteSet> spriteset;
		public SpriteSetManager (string folder);
		public Hmwd.SpriteSet getFromFilename (string filename);
		public Hmwd.SpriteSet getFromIndex (int index);
		public Hmwd.SpriteSet? getFromName (string name);
		public void loadAllFromFolder (string folder);
		public void printAll ();
		public string folder { get; set construct; }
		public int length { get; }
		public int size { get; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class SubTile : GLib.Object {
		public SubTile ();
		public void calcEdge (Hmwd.TileType[] neighbours, Hmwd.TileType type, uint location);
		public Hmwd.EdgeShape edge { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public abstract class Tile : GLib.Object {
		public Tile ();
		public abstract void calcEdges (Hmwd.TileType[] neighbours);
		public abstract void printValues ();
		public virtual void save (string filename);
		public int gid { get; set; }
		public double height { get; }
		public Hmwd.GdkTexture tex { get; set construct; }
		public Hmwd.TileType tile_type { get; set construct; }
		public double width { get; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class TileSet : GLib.Object {
		public uint height;
		public string name;
		public Hmwd.Tile[,] tile;
		public uint tileheight;
		public uint tilewidth;
		public string trans;
		public uint width;
		public TileSet ();
		public TileSet.fromPath (string folder, string filename);
		public Hmwd.Tile getTileFromIndex (uint index);
		public void loadFromPath (string folder, string filename);
		public void printAll ();
		public void printTiles ();
		public void printValues ();
		public void save (string folder = "./tmp/");
		public uint count_x { get; }
		public uint count_y { get; }
		public string filename { get; set; }
		public string source { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class TileSetManager : GLib.Object {
		public TileSetManager (string folder);
		public Hmwd.TileSet getFromFilename (string filename);
		public Hmwd.TileSet getFromIndex (int index);
		public Hmwd.TileSet getFromName (string name);
		public Hmwd.TileSet getFromSource (string source);
		public string getSourcesFromIndex (int index);
		public void printAll ();
		public string folder { get; set construct; }
		public int size { get; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class TileSetReference : GLib.Object {
		public TileSetReference (uint firstgid, Hmwd.TileSet source);
		public void printValues ();
		public uint firstgid { get; set construct; }
		public Hmwd.TileSet source { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public class Vector : GLib.Object {
		public double[] vec;
		public Vector (int dim);
		public double ScalarProduct (Hmwd.Vector v);
		public double VectorNorm ();
		public Hmwd.Vector VectorProduct (Hmwd.Vector v);
		public Hmwd.Vector addVector (Hmwd.Vector v);
		public Hmwd.Vector crop (Hmwd.Vector min, Hmwd.Vector max);
		public Hmwd.Vector divideByScalar (double s);
		public Vector.fromDifference (Hmwd.Vector v1, Hmwd.Vector v2);
		public Hmwd.Vector multMatrix (Hmwd.Matrix m, Hmwd.Vector v);
		public Hmwd.Vector multScalar (double s);
		public Hmwd.Vector normVector ();
		public int dim { get; set construct; }
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum Colorspace {
		RGB,
		RGBA;
		public string to_string ();
		public static Hmwd.Colorspace fromGdkPixbuf (Gdk.Pixbuf pixbuf);
		public int to_channel ();
		public bool has_alpha ();
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum CropType {
		EMPTY_CROP,
		GRASS,
		POTATO
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum Direction {
		NORTH,
		EAST,
		SOUTH,
		WEST;
		public string to_string ();
		public static Hmwd.Direction parse (string str);
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum DrawLevel {
		UNDER,
		SAME,
		OVER;
		public static Hmwd.DrawLevel parse (string str);
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum EdgeShape {
		FULL,
		OUTER_CORNER,
		INNER_CORNER,
		V_LINE,
		H_LINE
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum Mirror {
		NONE,
		VERTICAL,
		HORIZONTAL;
		public string to_string ();
		public static Hmwd.Mirror parse (string str);
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum Season {
		SPRING,
		SUMMER,
		FALL,
		WINTER
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum SpriteLayerType {
		BASE,
		ITEM;
		public static Hmwd.SpriteLayerType parse (string str);
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum TileType {
		NO_TILE,
		EMPTY_TILE,
		PLANTABLE,
		PLANT,
		GRASS,
		PATH,
		BUILDING,
		ROCK,
		WOOD,
		WATER
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public enum ViewEngine {
		SDL,
		OPENGL,
		CLUTTER,
		GTK_CLUTTER
	}
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public static int Round (double num);
	[CCode (cheader_filename = "Hmwd-0.1.h")]
	public static bool toggle (bool b);
}
